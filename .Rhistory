98.29 + (0.04885714  * (dass_sum - 92)),
ifelse(dass_sum < 3,
9.93 - (4.965 * (2 - dass_sum)), percentile)))
predictions <-
temp2 %>%
rowwise() %>%
mutate(percentile = ifelse(dass_sum > 91,
98.29 + (0.04885714  * (dass_sum - 92)),
ifelse(dass_sum < 3,
9.93 - (4.965 * (2 - dass_sum)), percentile))) %>%
round(percentile, 2)
predictions <-
temp2 %>%
rowwise() %>%
mutate(percentile = round(ifelse(dass_sum > 91,
98.29 + (0.04885714  * (dass_sum - 92)),
ifelse(dass_sum < 3,
9.93 - (4.965 * (2 - dass_sum)), percentile)), 2))
predictions <-
temp2 %>%
rowwise() %>%
mutate(percentile = round(ifelse(dass_sum > 91,
98.29 + (0.04885714  * (dass_sum - 92)),
ifelse(dass_sum < 3,
9.93 - (4.965 * (1 - dass_sum)), percentile)), 2))
predictions <-
temp2 %>%
rowwise() %>%
mutate(percentile = round(ifelse(dass_sum > 91,
98.29 + (0.04885714  * (dass_sum - 92)),
ifelse(dass_sum < 3,
9.93 - (3.31 * (2 - dass_sum)), percentile)), 2))
predictions <-
temp2 %>%
rowwise() %>%
mutate(percentile = round(ifelse(dass_sum > 91,
98.29 + (0.04885714  * (dass_sum - 92)),
ifelse(dass_sum < 3,
9.93 - (3.31 * (2 - dass_sum)), percentile)), 2),
weights = 100 - percentile)
temp2 <-
temp %>%
rownames_to_column(var = "dass_sum") %>%
mutate(dass_sum = as.integer(dass_sum)-1,
percentile = round(percentile, 2))
View(temp2)
View(temp2)
temp2 %>% write.csv("~/Desktop/percentiles.csv", row.names - FALSE)
temp2 %>% write.csv("~/Desktop/percentiles.csv", row.names = FALSE)
require(tidyverse)
require(ordinal)
require(cowplot)
# get data
setwd(params$location_of_data)
require(tidyverse)
require(ordinal)
require(cowplot)
# get data
setwd(params$location_of_data)
require(tidyverse)
require(ordinal)
require(cowplot)
# get data
setwd(params$location_of_data)
require(tidyverse)
require(ordinal)
require(cowplot)
# get data
setwd(params$location_of_data)
data_df <-
read.csv("data.csv", check.names = TRUE) %>%
select(participant, age, gender, dass_sum,
mean_self_report_absolute, mean_self_report_relative,
mean_implicit_absolute, mean_implicit_relative) %>%
mutate(gender = as.factor(ifelse(gender == 1, "female",
ifelse(gender == 2, "male", NA)))) %>%
rename(dass = dass_sum,
absolute_self_report = mean_self_report_absolute,
relative_self_report = mean_self_report_relative,
absolute_implicit = mean_implicit_absolute,
relative_implicit = mean_implicit_relative)
data_df <-
read.csv("data.csv", check.names = TRUE) %>%
select(participant, age, gender, dass_sum,
mean_self_report_absolute, mean_self_report_relative,
mean_implicit_absolute, mean_implicit_relative) %>%
mutate(gender = as.factor(ifelse(gender == 1, "female",
ifelse(gender == 2, "male", NA))))
# get data
setwd(params$location_of_data)
data_df <-
read.csv("data.csv", check.names = TRUE) %>%
select(participant, age, gender, dass_sum,
mean_self_report_absolute, mean_self_report_relative,
mean_implicit_absolute, mean_implicit_relative) %>%
mutate(gender = as.factor(ifelse(gender == 1, "female",
ifelse(gender == 2, "male", NA))))
setwd(params$location_of_data)
data_df <-
read.csv("data.csv", check.names = TRUE)
View(data_df)
View(data_df)
setwd(params$location_of_data)
data_df <-
read.csv("data.csv", check.names = TRUE) %>%
select(participant, age, gender, dass_sum,
mean_self_report_absolute,
mean_self_report_relative,
mean_implicit_absolute,
mean_implicit_relative)
install.packages("rover", repos = c("https://lair.functionalfinances.com/repos/shared", "https://lair.functionalfinances.com/repos/cran"))
install.packages("Lahman")
library(tidyverse)
library(Lahman)
career <-
Batting %>%
filter(AB > 0) %>%
anti_join(Pitching, by = "playerID") %>%
group_by(playerID) %>%
summarize(H = sum(H),
AB = sum(AB)) %>%
mutate(average = H / AB)
View(career)
View(career)
career <-
Master %>%
tbl_df() %>%
select(playerID, nameFirst, nameLast) %>%
unite(name, nameFirst, nameLast, sep = " ") %>%
inner_join(career, by = "playerID") %>%
select(-playerID)
View(career)
View(career)
career_filtered <-
career %>%
filter(AB >= 500)
m <-
MASS::fitdistr(career_filtered$average,
dbeta,
start = list(shape1 = 1, shape2 = 10))
alpha0 <- m$estimate[1]
beta0 <- m$estimate[2]
career_eb <-
career %>%
mutate(eb_estimate = (H + alpha0) / (AB + alpha0 + beta0))  # using bayes rule
View(career_eb)
View(career_eb)
# dependencies ------------------------------------------------------------
library(foreign)
library(tidyverse)
library(psych)
# get data ----------------------------------------------------------------
# data from project implicit demo datasets for Age IAT 2015 data https://osf.io/pbzcu/
# convert spss to rdata
#df <- read.spss("Age IAT.public.2015.sav", to.data.frame=TRUE)
# tidy data ---------------------------------------------------------------
# trimmed_df <-
#   df %>%
#   select(session_id,
#          age,
#          sex,
#          choosetobe,
#          feel,
#          hopetolive,
#          othersthink,
#          atoma,  # A person moves from being an adult to middle-aged at what age?
#          ctoya,  # A person moves from being a child to being a young adult at what age?
#          matoo,  # A person moves from being middle-aged to being old at what age?
#          yatoa) %>%  # A person moves from being a young adult to being an adult at what age?
#   filter(!is.na(age)) %>%
#   filter(sex == "m" | sex == "f")
#
# choosetobe_df <-
#   trimmed_df %>%
#   filter(!is.na(choosetobe)) %>%
#   select(age, choosetobe, sex) %>%
#   mutate(age = as.integer(age),
#          choosetobe = as.integer(choosetobe))
# save data to disk
#save(choosetobe_df, file = "preferred age data.rdata")
# load rdata file
load(file = "preferred age data.rdata")
descriptives <- describe(choosetobe_df) %>% select(n, mean, sd)
descriptives
mean_age <- descriptives["age","mean"]
ggplot(data = choosetobe_df) +
geom_density(aes(x = age), adjust = 4, colour = "red", fill = "red", alpha = 0.2) +
geom_vline(xintercept = mean_age, colour = "red") +
theme_minimal()
mean_agechoosetobe <- descriptives["choosetobe","mean"]
ggplot(data = choosetobe_df) +
geom_density(aes(x = choosetobe), adjust = 4, colour = "blue", fill = "blue", alpha = 0.2) +
geom_vline(xintercept = mean_agechoosetobe, colour = "blue") +
theme_minimal()
ggplot(data = choosetobe_df) +
geom_density(aes(x = choosetobe, group = sex, fill = sex, colour = sex), adjust = 4, alpha = 0.2) +
theme_minimal()
ggplot(data = choosetobe_df) +
geom_density(aes(x = age), adjust = 4, colour = "red", fill = "red", alpha = 0.2) +
geom_vline(xintercept = mean_age, colour = "red") +
geom_density(aes(x = choosetobe), adjust = 4, colour = "blue", fill = "blue", alpha = 0.2) +
geom_vline(xintercept = mean_agechoosetobe, colour = "blue") +
theme_minimal()
attach(choosetobe_df)
t.test(age, choosetobe,
alternative = "two.sided",
paired = TRUE)
ggplot(data = choosetobe_df) +
geom_point(aes(x = age, y = choosetobe), colour = "darkgreen", alpha = 0.1) +
theme_minimal()
ggplot(data = choosetobe_df) +
geom_point(aes(x = age, y = choosetobe), colour = "darkgreen", alpha = 0.1) +
geom_smooth(aes(x = age, y = choosetobe), method = "lm", colour = "darkorange") +
theme_minimal()
require(schoRsch)
choosetobe_trimmed_outlier_df <-
choosetobe_df %>%
schoRsch::outlier(dv = "age",
res.name = "age_outlier",
todo = "nothing",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "choosetobe",                   # not producing consisent results!
res.name = "choosetobe_outlier",
todo = "nothing",
upper.z = 2.5,
lower.z = -2.5) %>%
mutate(exclude = age_outlier + choosetobe_outlier) %>%
filter(exclude == 0)
ggplot(data = choosetobe_trimmed_outlier_df) +
geom_point(aes(x = age, y = choosetobe, group = sex, fill = sex, colour = sex), alpha = 0.1) +
geom_smooth(aes(x = age, y = choosetobe, group = sex, colour = sex), method = "lm") +
theme_minimal()
require(apatables)
install.packages("apatables")
install.packages("apaTables")
require(apaTables)
model_1 <- lm(choosetobe ~ age,
data = choosetobe_trimmed_outlier_df)
summary(model_1)
?apa.reg.table
?apaTables
require(apaTables)
library(apaTables)
apa.reg.table(basic.reg, filename="Table1_APA.doc", table.number=1)
apa.reg.table(model_1, filename="Table1_APA.doc", table.number=1)
?apa.reg.table
?dplyr
?apa.reg.table
model_1 <- lm(choosetobe ~ age,
data = choosetobe_trimmed_outlier_df)
summary(model_1)
model_1
model_1
summary(model_1)
model_1
summary(model_1)
names(summary(fit))
names(summary(model_1))
summary(model_1)
apa.reg.table(model_1, filename="model_1.doc", table.number=1)
require(tidyverse)
TFcorrect_df  <- read.csv("TFcorrect.csv") %>% mutate(condition = "TFcorrect")
TFrule_df     <- read.csv("TFrule.csv") %>% mutate(condition = "TFrule")
YNcorrect_df  <- read.csv("YNcorrect.csv") %>% mutate(condition = "YNcorrect")
YNrule_df     <- read.csv("YNrule.csv") %>% mutate(condition = "YNrule")
require(schoRsch)
all_df <-
rbind(TFcorrect_df, TFrule_df, YNcorrect_df, YNrule_df) %>%  # combine data frames
rename(rt = timeToCorrectResponse,
gender = participantGender,
age = participantAge,
block_order = startingRule,
trial_type = trialType,
block = currentRule) %>%
mutate(id = as.factor(paste(condition, participantCode, sep = "_")),
rt = as.numeric(rt),
condition = as.factor(condition)) %>%  # make unique id
select(id,  # trim variables
condition,
block,
gender,
age,
block_order,
isTestBlock,
trial_type,
rt,
accuracy)
trimmed_df <- all_df %>%
filter(isTestBlock == 1) %>% # test blocks only
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
require(BayesFactor)
bf <- anovaBF(rt ~ block * condition + id,
data = trimmed_df,
whichModels = "withmain",
whichRandom = "id",
iterations = 1000,
multicore = TRUE)
bf <- bf %>% sort(decreasing = TRUE)
bf
require(tidyverse)
TFcorrect_df  <- read.csv("TFcorrect.csv") %>% mutate(condition = "TFcorrect")
TFrule_df     <- read.csv("TFrule.csv") %>% mutate(condition = "TFrule")
YNcorrect_df  <- read.csv("YNcorrect.csv") %>% mutate(condition = "YNcorrect")
YNrule_df     <- read.csv("YNrule.csv") %>% mutate(condition = "YNrule")
require(schoRsch)
all_df <-
rbind(TFcorrect_df, TFrule_df, YNcorrect_df, YNrule_df) %>%  # combine data frames
rename(rt = timeToCorrectResponse,
gender = participantGender,
age = participantAge,
block_order = startingRule,
trial_type = trialType,
block = currentRule) %>%
mutate(id = as.factor(paste(condition, participantCode, sep = "_")),
rt = as.numeric(rt),
condition = as.factor(condition)) %>%  # make unique id
select(id,  # trim variables
condition,
block,
gender,
age,
block_order,
isTestBlock,
trial_type,
rt,
accuracy)
trimmed_df <- all_df %>%
filter(isTestBlock == 1) %>% # test blocks only
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
ggplot() +
geom_density(data = trimmed_df, aes(x = rt)) +
theme_minimal()
ggplot() +
geom_density(data = all_df, aes(x = rt)) +
geom_density(data = trimmed_df, aes(x = rt)) +
theme_minimal()
ggplot() +
geom_density(data = all_df, aes(x = rt)) +
theme_minimal()
ggplot() +
geom_density(data = all_df, aes(x = rt)) +
theme_minimal()
ggplot() +
geom_density(data = trimmed_df, aes(x = rt)) +
theme_minimal()
ggplot() +
geom_density(data = all_df, aes(x = rt)) +
theme_minimal()
ggplot() +
geom_density(data = trimmed_df, aes(x = rt)) +
theme_minimal()
all_df <-
rbind(TFcorrect_df, TFrule_df, YNcorrect_df, YNrule_df) %>%  # combine data frames
rename(rt = timeToCorrectResponse,
gender = participantGender,
age = participantAge,
block_order = startingRule,
trial_type = trialType,
block = currentRule)
all_df <-
rbind(TFcorrect_df, TFrule_df, YNcorrect_df, YNrule_df) %>%  # combine data frames
rename(rt = timeToCorrectResponse,
gender = participantGender,
age = participantAge,
block_order = startingRule,
trial_type = trialType,
block = currentRule) %>%
mutate(id = as.factor(paste(condition, participantCode, sep = "_")),
rt = as.numeric(rt),
condition = as.factor(condition))
trimmed_df <- all_df %>%
filter(isTestBlock == 1) %>% # test blocks only
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
require(BayesFactor)
bf <- anovaBF(rt ~ block * condition + id,
data = trimmed_df,
whichModels = "withmain",
whichRandom = "id",
iterations = 1000,
multicore = TRUE)
sapply(trimmed_df, class)
TFcorrect_df  <- read.csv("TFcorrect.csv") %>% mutate(condition = "TFcorrect")
TFrule_df     <- read.csv("TFrule.csv") %>% mutate(condition = "TFrule")
YNcorrect_df  <- read.csv("YNcorrect.csv") %>% mutate(condition = "YNcorrect")
YNrule_df     <- read.csv("YNrule.csv") %>% mutate(condition = "YNrule")
all_df <-
rbind(TFcorrect_df, TFrule_df, YNcorrect_df, YNrule_df)
all_df <-
rbind(TFcorrect_df, TFrule_df, YNrule_df) %>%  # combine data frames
rename(rt = timeToCorrectResponse,
gender = participantGender,
age = participantAge,
block_order = startingRule,
trial_type = trialType,
block = currentRule) %>%
mutate(id = as.factor(paste(condition, participantCode, sep = "_")),
rt = as.numeric(rt),
condition = as.factor(condition)) %>%  # make unique id
select(id,  # trim variables
condition,
block,
gender,
age,
block_order,
isTestBlock,
trial_type,
rt,
accuracy)
all_df <-
rbind(TFcorrect_df, TFrule_df, YNcorrect_df)
require(brms)
require(tidyverse)
require(parallel)
setwd("/Users/Ian/Dropbox/Work/Projects/Alphabet soup/Hussey & Hughes - Derivation study/OSF - Transitive relations and implicit attitudes/Experiment 2/")
IAT_data <-
read.csv("Processed data/processed data - long format IAT data.csv") %>%
mutate(block = ifelse(block == 1, "IAT block 1", "IAT block 2"),
block = as.factor(block),
condition = as.factor(ifelse(condition == 1, "Condition 1", "Condition 2")),
participant = as.factor(participant))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
mutate(group = ifelse(condition == "Condition 1" & block == "IAT block 1", "condition 1 block 1",
ifelse(condition == "Condition 1" & block == "IAT block 2", "condition 1 block 2",
ifelse(condition == "Condition 2" & block == "IAT block 1", "condition 2 block 1",
ifelse(condition == "Condition 2" & block == "IAT block 2", "condition 2 block 2", NA)))))
setwd("/Users/Ian/git/brms-testing/")
possible_priors <-
get_prior(formula = rt ~ block * condition + (1 | participant),
data = IAT_data_outliers_removed,
family = gaussian(link = "identity"))
prior <- c(set_prior("cauchy(0, 0.707)", class = "b"),  # "fixed" effect
set_prior("cauchy(0, 1.0)", class = "sd"))    # "random" effect
model_1 <- brm(formula = rt ~ block * condition + (1 | participant),
data = IAT_data_outliers_removed,
family = gaussian(link = "identity"),
prior = prior,
#threshold = "flexible",
iter = 1000,  # default
#warmup = iter/2, # default
chains = 1,  # default
#cov_ranef = "participant",  # for setting random effects?
#sample_prior = TRUE,  # can be used to calculate BF
cores = detectCores(),
algorithm = "sampling")  # use MCMC
plot(model_1, ask = FALSE)
model_1
model_1
H1 <- hypothesis(model_1, "blockIATblock2:conditionCondition2 - Intercept > 0")
plot(H1)
H1
?brm
model_1 <- brm(formula = rt ~ block * condition + (1 | participant),
data = IAT_data_outliers_removed,
family = gaussian(link = "identity"),
prior = prior,
#threshold = "flexible",
iter = 2000,  # default
#warmup = iter/2, # default
chains = 4,  # default
#cov_ranef = "participant",  # for setting random effects?
#sample_prior = TRUE,  # can be used to calculate BF
cores = detectCores(),
algorithm = "sampling")  # use MCMC
?hypothesis
save(model_1, "model_1_brmsfit")
?save
save(model_1, file = "model_1_brmsfit")
model_1
predict(model_1)
model_1
plot(model_1, ask = FALSE)
H1 <- hypothesis(model_1, hypothesis = "blockIATblock2:conditionCondition2 > 0")
H1
H1
H1
H1 <- hypothesis(model_1, hypothesis = "blockIATblock2:conditionCondition2 < 0")
H1
H1
plot(H1)
H1 <- hypothesis(model_1, hypothesis = "blockIATblock2:conditionCondition2 = 0")
H1
model_1
H1 <- hypothesis(model_1, hypothesis = "blockIATblock2:conditionCondition2 < 0")
H1
H1 <- hypothesis(model_1, hypothesis = "blockIATblock2:conditionCondition2 - Intercept < 0")
H1
H1 <- hypothesis(model_1, hypothesis = "Intercept - blockIATblock2:conditionCondition2 < 0")
H1
H1 <- hypothesis(model_1, hypothesis = "Intercept - blockIATblock2:conditionCondition2 > 0")
H1
plot(H1)
install.packages("brms")
install.packages("brms")
require(brms)
install.packages("brms")
install.packages("brms")
install.packages("brms")
